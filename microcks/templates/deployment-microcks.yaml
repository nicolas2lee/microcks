apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: "{{ .Values.appName }}"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: "{{ .Values.appName }}"
        container: spring
        group: microcks
    spec:
      containers:
      - name: spring
        image: {{ .Values.microcks.image }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-Djavax.net.ssl.trustStore=/security/truststore.p12 -Djavax.net.ssl.trustStorePassword=changeit"
          - name: SPRING_PROFILES_ACTIVE
            value: prod
          - name: SPRING_DATA_MONGODB_URI
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@${MONGODB_URI}/${SPRING_DATA_MONGODB_DATABASE}?authSource=admin&replicaSet=replset&ssl=true
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.usernameKey | default "username" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: username
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.passwordKey | default "password" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: password
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: MONGODB_URI
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.uri | default "mongodb:27017" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: uri
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_DATABASE
            value: {{ .Values.mongodb.database | default .Values.appName }}
          - name: POSTMAN_RUNNER_URL
            value: http://{{ .Values.appName }}-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://{{ .Values.appName }}:8080
          {{- if hasKey .Values.keycloak "privateUrl" }}
          - name: KEYCLOAK_URL
            value: "{{ .Values.keycloak.privateUrl }}"
          - name: KEYCLOAK_PUBLIC_URL
            value: https://{{ .Values.keycloak.url }}/auth
          {{- else }}
          - name: KEYCLOAK_URL
            value: https://{{ .Values.keycloak.url }}/auth
          {{- end }}
          {{- if and .Values.features.async.enabled }}
          - name: ASYNC_MINION_URL
            value: http://{{ .Values.appName }}-async-minion:8080
          {{- end }}
          - name: KAFKA_BOOTSTRAP_SERVER
            {{- if eq .Values.features.async.kafka.install true }}
            value: "{{ .Values.appName }}-kafka-kafka-bootstrap:9092"
            {{- else }}
            value: "{{ .Values.features.async.kafka.url }}"
            {{- end }}
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - name: "{{ .Values.appName }}-config"
            mountPath: "/deployments/config"
          - name: "{{ .Values.appName }}-certificates"
            mountPath: "/security"
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{ .Values.appName }}-config"
          configMap:
            name: "{{ .Values.appName }}-config"
        - name: "{{ .Values.appName }}-certificates"
          secret:
            secretName: "{{ .Values.appName }}-certificates"