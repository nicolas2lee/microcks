apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: "{{ .Values.appName }}"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: "{{ .Values.appName }}"
        container: spring
        group: microcks
    spec:
      containers:
      - name: spring
        image: {{ .Values.microcks.image }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: ""
          - name: SPRING_PROFILES_ACTIVE
            value: prod
          - name: SPRING_DATA_MONGODB_URI
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@{{ .Values.mongodb.uri | default (print .Values.appName "-mongodb:27017") }}/${SPRING_DATA_MONGODB_DATABASE}
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.usernameKey | default "username" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: username
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.passwordKey | default "password" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: password
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_DATABASE
            value: {{ .Values.mongodb.database | default .Values.appName }}
          - name: POSTMAN_RUNNER_URL
            value: http://{{ .Values.appName }}-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://{{ .Values.appName }}:8080
          {{- if hasKey .Values.keycloak "privateUrl" }}
          - name: KEYCLOAK_URL
            value: "{{ .Values.keycloak.privateUrl }}"
          - name: KEYCLOAK_PUBLIC_URL
            value: https://{{ .Values.keycloak.url }}/auth
          {{- else }}
          - name: KEYCLOAK_URL
            value: https://{{ .Values.keycloak.url }}/auth
          {{- end }}
          {{- if and .Values.features.async.enabled }}
          - name: ASYNC_MINION_URL
            value: http://{{ .Values.appName }}-async-minion:8080
          {{- end }}
          - name: KAFKA_BOOTSTRAP_SERVER
            {{- if eq .Values.features.async.kafka.install true }}
            value: "{{ .Values.appName }}-kafka-kafka-bootstrap:9092"
            {{- else }}
            value: "{{ .Values.features.async.kafka.url }}"
            {{- end }}
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - name: "{{ .Values.appName }}-config"
            mountPath: "/deployments/config"
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{ .Values.appName }}-config"
          configMap:
            name: "{{ .Values.appName }}-config"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-postman-runtime"
  labels:
    app: "{{ .Values.appName }}"
    container: postman-runtime
    group: microcks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: "{{ .Values.appName }}-postman-runtime"
      container: postman-runtime
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: "{{ .Values.appName }}-postman-runtime"
        container: postman-runtime
        group: microcks
    spec:
      containers:
      - name: postman-runtime
        image: {{ .Values.postman.image }}
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: info
        resources:
          limits:
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 4
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
{{- if and .Values.mongodb.install }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-mongodb"
  labels:
    app: "{{ .Values.appName }}"
    container: mongodb
    group: microcks
  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
    spec:
      containers:
      - name: mongodb
        image: {{ .Values.mongodb.image }}
        ports:
        - containerPort: 27017
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 3
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
        env:
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.appName }}-mongodb-connection"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.appName }}-mongodb-connection"
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: adminPassword
              name: "{{ .Values.appName }}-mongodb-connection"
        - name: MONGODB_DATABASE
          value: "{{ .Values.appName }}"
        resources:
          limits:
            memory: 512Mi
        volumeMounts:
        - name: "{{ .Values.appName }}-mongodb-data"
          mountPath: "/var/lib/mongodb/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities: {}
          privileged: false
      volumes:
      - name: "{{ .Values.appName }}-mongodb-data"
        {{- if .Values.mongodb.persistent }}
        persistentVolumeClaim:
          claimName: "{{ .Values.appName }}-mongodb"
        {{- else }}
        emptyDir:
          medium: ''
        {{- end }}
      restartPolicy: Always
      dnsPolicy: ClusterFirst
{{- end }}
{{- if and .Values.keycloak.install }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-keycloak"
  labels:
    app: "{{ .Values.appName }}"
    container: keycloak
    group: microcks
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: keycloak
      container: keycloak
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: keycloak
        container: keycloak
        group: microcks
    spec:
      containers:
      - name: keycloak-server
        image: {{ .Values.keycloak.image }}
        resources:
          requests:
            cpu: 400m
            memory: 400Mi
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: jolokia
          containerPort: 8778
          protocol: TCP
        args:
        - "-b $(INTERNAL_POD_IP)"
        - "-Djgroups.bind_addr=global"
        - "-Djboss.node.name=$(INTERNAL_POD_IP)"
        - "-Dkeycloak.import=/opt/jboss/keycloak/standalone/configuration/realm/microcks-realm.json"
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: OPERATING_MODE
          value: clustered
        - name: DB_VENDOR
          value: POSTGRES
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: DB_DATABASE
          value: root
        - name: DB_ADDR
          value: "{{ .Values.appName }}-keycloak-postgresql"
        - name: PROXY_ADDRESS_FORWARDING
          value: 'true'
        {{- if hasKey .Values.keycloak "privateUrl" }}
        - name: KEYCLOAK_FRONTEND_URL
          value: https://{{ .Values.keycloak.url }}/auth
        {{- end }}
        volumeMounts:
        - name: {{ .Values.appName }}-keycloak-config
          mountPath: "/opt/jboss/keycloak/standalone/configuration/realm"
        securityContext:
          privileged: false
      volumes:
      - name: "{{ .Values.appName }}-keycloak-config"
        configMap:
          name: "{{ .Values.appName }}-keycloak-config"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-keycloak-postgresql"
  labels:
    app: "{{ .Values.appName }}"
    container: keycloak-postgresql
    group: microcks
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: keycloak-postgresql
      container: keycloak-postgresql
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: keycloak-postgresql
        container: keycloak-postgresql
        group: microcks
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: keycloak-postgresql
        image: {{ .Values.keycloak.postgresImage }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE}
              -c 'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: POSTGRESQL_DATABASE
          value: root
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: '100'
        - name: POSTGRESQL_SHARED_BUFFERS
          value: 12MB
        volumeMounts:
          - name: "{{ .Values.appName }}-keycloak-postgresql-data"
            mountPath: "/var/lib/pgsql/data"
      volumes:
      - name: "{{ .Values.appName }}-keycloak-postgresql-data"
        {{- if .Values.keycloak.persistent }}
        persistentVolumeClaim:
          claimName: "{{ .Values.appName }}-keycloak-postgresql"
        {{- else }}
        emptyDir:
          medium: ''
        {{- end }}
{{- end }}
{{- if and .Values.features.async.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-async-minion"
  labels:
    app: "{{ .Values.appName }}"
    container: async-minion
    group: microcks
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: async-minion
      container: async-minion
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: async-minion
        container: async-minion
        group: microcks
    spec:
      containers:
      - name: async-minion
        image: {{ .Values.features.async.image }}
        imagePullPolicy: IfNotPresent
        env:
          - name: QUARKUS_PROFILE
            value: kube
        ports:
        - containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - name: "{{ .Values.appName }}-async-minion-config"
            mountPath: "/deployments/config"
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{ .Values.appName }}-async-minion-config"
          configMap:
            name: "{{ .Values.appName }}-async-minion-config"
{{- end }}