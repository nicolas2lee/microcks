kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-config"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
data:
  features.properties: |-
    features.feature.repository-filter.enabled={{ .Values.features.repositoryFilter.enabled }}
    features.feature.repository-filter.label-key={{ .Values.features.repositoryFilter.labelKey }}
    features.feature.repository-filter.label-label={{ .Values.features.repositoryFilter.labelLabel }}
    features.feature.repository-filter.label-list={{ .Values.features.repositoryFilter.labelList }}

    features.feature.async-api.enabled={{ .Values.features.async.enabled }}
    features.feature.async-api.default-binding={{ .Values.features.async.defaultBinding }}
    {{- if eq .Values.features.async.kafka.install true }}
    features.feature.async-api.endpoint-KAFKA={{ .Values.appName }}-kafka.{{ .Values.features.async.kafka.url }}:443
    {{- else }}
    features.feature.async-api.endpoint-KAFKA={{ .Values.features.async.kafka.url }}
    {{- end }}
    {{- if .Values.features.async.mqtt.url }}
    features.feature.async-api.endpoint-MQTT={{ .Values.features.async.mqtt.url }}
    {{- end }}
  application.properties: |-
    # Application configuration properties
    tests-callback.url=${TEST_CALLBACK_URL}
    postman-runner.url=${POSTMAN_RUNNER_URL}
    async-minion.url=${ASYNC_MINION_URL|http://localhost:8081}

    network.username=
    network.password=

    validation.resourceUrl=https://{{ .Values.microcks.url }}/api/resources/
    services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}
    mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}

    # Logging configuration properties
    logging.config=/deployments/config/logback.xml

    # Keycloak configuration properties
    keycloak.auth-server-url=${KEYCLOAK_URL:http://localhost:8180/auth}
    keycloak.realm={{ .Values.keycloak.realm }}
    keycloak.resource=microcks-app
    keycloak.use-resource-role-mappings=true
    keycloak.bearer-only=true
    keycloak.ssl-required=external
    keycloak.disable-trust-manager=true

    keycloak.security-constraints[0].authRoles[0]=admin
    keycloak.security-constraints[0].authRoles[1]=manager
    keycloak.security-constraints[0].authRoles[2]=user
    keycloak.security-constraints[0].securityCollections[0].name=Insecure stuffs
    keycloak.security-constraints[0].securityCollections[0].patterns[0]=/api/services
    keycloak.security-constraints[0].securityCollections[0].patterns[1]=/api/services/count
    keycloak.security-constraints[0].securityCollections[0].patterns[2]=/api/jobs
    keycloak.security-constraints[0].securityCollections[0].patterns[3]=/api/jobs/count

    # Keycloak access configuration properties
    sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}

    # Async mocking support.
    async-api.enabled={{ .Values.features.async.enabled }}
    async-api.default-binding={{ .Values.features.async.defaultBinding }}
    async-api.default-frequency={{ .Values.features.async.defaultFrequency }}

    # Kafka configuration properties
    spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration scan="true">
      <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <charset>utf-8</charset>
          <Pattern>[%p] %c - %m%n</Pattern>
        </encoder>
      </appender>

      <logger name="io.github.microcks" level="INFO"/>
      <!-- Change com.mongodb to org.mongodb so that com.mongodb.FongoDBCollection is ignored, set to debug and tests do not fail... -->
      <logger name="org.mongodb" level="INFO"/>
      <logger name="org.springframework.data.mongodb" level="INFO"/>
      <logger name="org.keycloak" level="INFO"/>

      <logger name="jdk.event.security" level="WARN"/>
      <logger name="javax.activation" level="WARN"/>
      <logger name="javax.mail" level="WARN"/>
      <logger name="javax.xml.bind" level="WARN"/>
      <logger name="ch.qos.logback" level="WARN"/>
      <logger name="com.codahale.metrics" level="WARN"/>
      <logger name="com.ryantenney" level="WARN"/>
      <logger name="com.sun.xml.internal.bind" level="WARN"/>
      <logger name="com.zaxxer" level="WARN"/>
      <logger name="io.undertow" level="WARN"/>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
      <logger name="org.bson" level="WARN"/>
      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.aop" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="org.springframework.security" level="WARN"/>
      <logger name="org.springframework.cache" level="WARN"/>
      <logger name="org.springframework.scheduling" level="WARN"/>
      <logger name="org.thymeleaf" level="WARN"/>
      <logger name="org.xnio" level="WARN"/>
      <logger name="com.mangofactory.swagger" level="WARN"/>
      <logger name="com.wordnik.swagger" level="warn"/>
      <logger name="sun.rmi.transport" level="warn"/>

      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
      </contextListener>

      <root level="${logback.loglevel}">
        <appender-ref ref="CONSOLE"/>
      </root>
    </configuration>
{{- if .Values.keycloak.install }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-keycloak-config"
  labels:
    app: "{{ .Values.appName }}"
    container: keycloak
    group: microcks
data:
  microcks-realm.json: |-
    {
      "id": "microcks",
      "realm": "microcks",
      "displayName": "Microcks",
      "notBefore": 0,
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "offlineSessionIdleTimeout": 2592000,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "roles": {
        "realm": [],
        "client": {
          "microcks-app": [
            {
              "name": "user",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "admin",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "manager",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            }
          ]
        }
      },
      "defaultRoles": [ ],
      "requiredCredentials": [ "password" ],
      "scopeMappings": [],
      "clientScopeMappings": {
        "microcks-app": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manager",
              "admin",
              "user"
            ]
          }
        ]
      },
      "applications": [
        {
          "name": "microcks-app",
          "enabled": true,
          "bearerOnly": true,
          "defaultRoles": [
            "user"
          ]
        },
        {
          "name": "microcks-app-js",
          "enabled": true,
          "publicClient": true,
          "webOrigins": [
            "+"
          ],
          "redirectUris": [
            "https://{{ .Values.microcks.url }}/*"
          ],
          "fullScopeAllowed": false
        },
        {
          "name": "{{ .Values.keycloak.serviceAccount }}",
          "secret": "{{ .Values.keycloak.serviceAccountCredentials }}",
          "enabled": true,
          "bearerOnly": false,
          "publicClient": false,
          "standardFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "clientAuthenticatorType": "client-secret"
        }
      ],
      "identityProviders": [
      ],
      "keycloakVersion": "10.0.1"
    }
{{- end }}
{{- if .Values.features.async.enabled }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-async-minion-config"
  labels:
    app: "{{ .Values.appName }}"
    container: asybnc-minion
    group: microcks
data:
  application.properties: |-
    # Configuration file.
    %kube.quarkus.http.port=8080

    # Configure the log level.
    %kube.quarkus.log.level=INFO
    %kube.quarkus.log.console.level=INFO

    # Access to Microcks API server.
    %kube.io.github.microcks.minion.async.client.MicrocksAPIConnector/mp-rest/url=http://{{ .Values.appName }}:8080
    %kube.microcks.serviceaccount={{ .Values.keycloak.serviceAccount }}
    %kube.microcks.serviceaccount.credentials={{ .Values.keycloak.serviceAccountCredentials }}

    # Access to Kafka broker.
    {{- if .Values.features.async.kafka.install }}
    %kube.kafka.bootstrap.servers={{ .Values.appName }}-kafka-kafka-bootstrap:9092
    %kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={{ .Values.appName }}-kafka-kafka-bootstrap:9092
    {{ else }}
    %kube.kafka.bootstrap.servers={{ .Values.features.async.kafka.url }}
    %kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={{ .Values.features.async.kafka.url }}
    {{ end }}

    {{- if .Values.features.async.kafka.schemaRegistry.url }}
    # Access to Kafka schema registry.
    %kube.kafka.schema.registry.url={{ .Values.features.async.kafka.schemaRegistry.url }}
    %kube.kafka.schema.registry.confluent={{ .Values.features.async.kafka.schemaRegistry.confluent }}
    %kube.kafka.schema.registry.username={{ .Values.features.async.kafka.schemaRegistry.username | default "" }}
    %kube.kafka.schema.registry.credentials.source={{ .Values.features.async.kafka.schemaRegistry.credentialsSource | default "USER_INFO" }}
    {{ end }}

    {{- if .Values.features.async.mqtt.url }}
    # Access to MQTT broker.
    %kube.mqtt.server={{ .Values.features.async.mqtt.url }}
    %kube.mqtt.username={{ .Values.features.async.mqtt.username }}
    %kube.mqtt.password={{ .Values.features.async.mqtt.password }}
    {{- end }}

    # Configure the minion own behavioral properties.
    %kube.minion.supported-bindings=KAFKA{{ if .Values.features.async.mqtt.url }},MQTT{{ end }}
    %kube.minion.restricted-frequencies=30,10
    %kube.minion.default-avro-encoding={{ .Values.features.async.defaultAvroEncoding }}
{{- end -}}